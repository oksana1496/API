{
	"info": {
		"_postman_id": "04abcbce-c7ee-44df-8850-309c07680a44",
		"name": "Ksendzov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19794331"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "age",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_method?name=Alex&age=32",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alex",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?name=Alex&age=32&weight=80",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "weight",
									"value": "80"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name=Alex&age=32&salary=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Alex&age=32&salary=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Alex&age=32&salary=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alex",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// // // //Проверить, что name в ответе равно name в request (name вбить руками.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Alex\");\r",
									"});\r",
									"\r",
									"\r",
									"// // // //Проверить, что age в ответе равно age в request (age вбить руками.)\r",
									"pm.test(\"Age is correct\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(\"32\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// // // //Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(2000);\r",
									"});\r",
									"\r",
									"\r",
									"// Спарсить request\r",
									"let jsonDataReq = request.data;\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(jsonDataReq.name);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age is correct\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(jsonDataReq.age);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
									"console.log(jsonData.salary)\r",
									"console.log(jsonDataReq.salary)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+jsonDataReq.salary);\r",
									"});\r",
									"\r",
									"\r",
									"// Вывести в консоль параметр family из response.\r",
									"let family_1 = jsonData.family\r",
									"console.log(family_1)\r",
									"\r",
									"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"Salary*4 is correct\", function () {\r",
									"    pm.expect(jsonDataReq.salary*4).to.eql(jsonData.family.u_salary_1_5_year);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alex",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request.\r",
									"let jsonDataReq = pm.request.url.query.toObject();\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request)\r",
									"let name_1 = jsonDataReq.name \r",
									"let name_2 = jsonData.name \r",
									"console.log(name_1)\r",
									"console.log(name_2)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(name_1).to.eql(name_2);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age забрать из request)\r",
									"pm.test(\"Age is correct\", function () {\r",
									"    pm.expect(jsonDataReq.age).to.eql(jsonData.age);\r",
									"});\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(+jsonDataReq.salary).to.eql(jsonData.salary);\r",
									"});\r",
									"\r",
									"// Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog has a property name\", function () {\r",
									"pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
									"})\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog has a property age\", function () {\r",
									"pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
									"})\r",
									"\r",
									"// Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Parameter name is Luky\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"// Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Parameter age is 4\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Alex&age=32&salary=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json\r",
									" let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request\r",
									"let jsonDataReq = pm.request.url.query.toObject();\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(jsonDataReq.name);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Age is correct\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(+jsonDataReq.age);\r",
									"});\r",
									"\r",
									"// Вывести в консоль параметр salary из request.\r",
									"console.log(jsonDataReq.salary)\r",
									"\r",
									"// Вывести в консоль параметр salary из response.\r",
									"console.log(jsonData.salary)\r",
									"\r",
									"// Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[0])\r",
									"\r",
									"// Вывести в консоль 1-й элемент параметр salary из response.\r",
									"console.log(jsonData.salary[1])\r",
									"\r",
									"// Вывести в консоль 2-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[2])\r",
									"\r",
									"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(+jsonDataReq.salary);\r",
									"});\r",
									"\r",
									"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(+jsonData.salary[1]).to.eql(jsonDataReq.salary*2);\r",
									"});\r",
									"\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(+jsonData.salary[2]).to.eql(jsonDataReq.salary*3);\r",
									"});\r",
									"\r",
									"// Создать в окружении переменную name\r",
									"pm.environment.set(\"name\");\r",
									"\r",
									"\r",
									"// Создать в окружении переменную age\r",
									"pm.environment.set(\"age\");\r",
									"\r",
									"\r",
									"// Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary\");\r",
									"\r",
									"// Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", jsonData.name);\r",
									"\r",
									"\r",
									"// Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", jsonData.age);\r",
									"\r",
									"\r",
									"// Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
									"\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"let salary_1 = jsonData.salary\r",
									"  for (let salary_1 in jsonData.salary) {\r",
									"    if (jsonData.salary.hasOwnProperty(salary_1)) {\r",
									"      console.log(jsonData.salary[salary_1]);\r",
									"    }\r",
									"  }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Alex&age=32&salary=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									" \r",
									"// Спарсить request. \r",
									"let jsonDataReq = request.data;\r",
									"\r",
									"// Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test (\"Verify that Body has start_qa_salary\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('start_qa_salary');   \r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test (\"Verify that Body has qa_salary_after_6_months\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('qa_salary_after_6_months');   \r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test (\"Verify that Body has qa_salary_after_12_months\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('qa_salary_after_12_months');   \r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test (\"Verify that Body has qa_salary_after_1.5_year\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('qa_salary_after_1.5_year');   \r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test (\"Verify that Body has qa_salary_after_3.5_years\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('qa_salary_after_3.5_years');   \r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что json response имеет параметр person\r",
									"pm.test (\"Verify that Body has person\", function () {\r",
									"    pm.response.to.have.json.jsonBody ('person');   \r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"start_qa_salary is salary from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary).to.eql(jsonData.start_qa_salary);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_6_months is salary*2 from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary*2).to.eql(jsonData.qa_salary_after_6_months);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months is salary*2.7 from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary*2.7).to.eql(jsonData.qa_salary_after_12_months);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_1.5_year is salary*3.3 from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary*3.3).to.eql(jsonData[\"qa_salary_after_1.5_year\"]);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_3.5_years is salary*3.8 from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary*3.8).to.eql(jsonData[\"qa_salary_after_3.5_years\"]);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"u_age is age from request\", function () {\r",
									"    pm.expect(+jsonDataReq.age).to.eql(jsonData.person.u_age);\r",
									"});\r",
									"\r",
									"\r",
									"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"u_salary_5_years is salary*4.2 from request\", function () {\r",
									"    pm.expect(+jsonDataReq.salary*4.2).to.eql(jsonData.person.u_salary_5_years);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}